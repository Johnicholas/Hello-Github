%include {
#include <stdio.h>
#include <stdlib.h> // for memset
}

%parse_accept {
printf("parsing complete\n");
}

%stack_overflow {
fprintf(stderr, "error: parser stack overflow\n");
}

start ::= document .
document ::= . { printf("parsing empty document\n"); }
document ::= document line .
line ::= sentence PERIOD . { printf("parsing line\n"); }
sentence ::= rule . { printf("parsing sentence->rule\n"); }
sentence ::= query . { printf("parsing sentence->query\n"); }
sentence ::= command . { printf("parsing sentence->command\n"); }
rule ::= head . { printf("parsing rule->head\n"); }
rule ::= head IMPLIED_BY tail . { printf("parsing implied-by\n"); }
query ::= BEGIN_QUERY tail . { printf("parsing begin_query\n"); }
command ::= INCLUDE file_name . { printf("parsing include\n"); }
command ::= EXIT . { printf("parsing exit\n"); }
file_name ::= LOWER_ID . { printf("parsing lowercase filename\n"); }
file_name ::= UPPER_ID . { printf("parsing uppercase filename\n"); }
head ::= goal . { printf("parsing head->goal\n"); }
tail ::= goal . { printf("parsing tail->goal\n"); }
tail ::= goal COMMA tail . { printf("parsing tail comma\n"); } // TODO: right recursion. Bad!
goal ::= constant . { printf("parsing goal->constant\n"); }
goal ::= variable . { printf("parsing goal->variable\n"); }
goal ::= structure . { printf("parsing goal->structure\n"); }
constant ::= LOWER_ID . { printf("parsing constant\n"); }
variable ::= UPPER_ID . { printf("parsing variable\n"); }
structure ::= LOWER_ID OPEN_PAREN component_list CLOSE_PAREN . { printf("parsing structure\n"); }
component_list ::= goal . { printf("parsing component_list->goal\n"); }
component_list ::= goal COMMA component_list . { printf("parsing component_list comma\n"); } // TODO: right recursion. Bad!
