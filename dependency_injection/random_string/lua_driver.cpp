#include "and_language.h"
#include "or_language.h"
#include "singleton_language.h"

extern "C" {
#include "lua.h"
#include "lualib.h"
#include "lauxlib.h"
}
// This included file was generated by tolua++
#pragma GCC diagnostic ignored "-Wwrite-strings"
#include "random_string.c"

#include <getopt.h>
#include <iostream>
using namespace std;

void run(language* to_run) {
  string unrank_target;
  while (cin >> unrank_target) {
    num tmp;
    tmp.fromstring(unrank_target);
    to_run->unrank(cout, tmp);
    cout << endl;
  }
}

void parse_and_run(const char* filename) {
  lua_State* L= lua_open();
  luaopen_base(L);
  luaopen_io(L);
  luaopen_string(L);
  luaopen_math(L);
  tolua_random_string_open(L);

  if (luaL_loadfile(L, filename) || lua_pcall(L, 0, 0, 0)) {
    fprintf(stderr, "cannot run %s: %s", filename, lua_tostring(L, -1));
    exit(1);
  }
  lua_getglobal(L, "main");
  language* to_run= *((language**)lua_touserdata(L, -1));

  run(to_run);

  lua_close(L);
}

#define PROGRAM_NAME "random_string"
#define PROGRAM_DESCRIPTION "Reads a grammar file and uses it to translate nonnegative integers on stdin to strings (in the language defined by that grammar) on stdout."
#define VERSION_STRING "0.2"
#define COPYRIGHT "Copyright 2011 IDEXX Laboratories, Inc."

// display usage info and exit
void usage() {
  cout << "Usage: " << PROGRAM_NAME << " [args]" << endl;
  cout << "  -g --grammar      Context free grammar file" << endl;
  cout << "  -v --version      Display full version information and exit" << endl;
  exit( 1 );
}

int main(int argc, char* argv[]) {
  const char * grammar_filename = 0;

  // parse the command line
  while ( true ) {
    static struct option opts[] = {
      // name, has_arg, flag* val
      {"grammar", 1, NULL, 'g'},
      {"version", 0, NULL, 'v'},
      {NULL, 0, NULL, 0} // Last option is always NULL
    };
    
    int c= getopt_long( argc, argv, "g:v", opts, NULL);
    if ( c == -1 ) {
      break;
    }
    switch ( c ) {
    case 'g': // grammar file
      grammar_filename= optarg;
      break;
    case 'v': // version
      cout << PROGRAM_DESCRIPTION << " V" << VERSION_STRING << endl;
      cout << COPYRIGHT << endl;
      exit( 0 );
      break;
    default:
      cerr << "Unknown arg: " << (char)c << endl;
    case '?': // missing argument
      usage();
      break;
    }
  } // end while true

  if( !grammar_filename ) {
    cerr << "Missing grammar filename" << endl;
    usage();
  }

  parse_and_run( grammar_filename );

  return 0;
}
