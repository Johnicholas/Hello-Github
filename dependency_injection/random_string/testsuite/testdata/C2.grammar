start ::= translation_unit .
primary_expression ::= x_ .
primary_expression ::= 1_ .
primary_expression ::= "a" .
primary_expression ::= ( expression ) .
postfix_expression ::= primary_expression .
postfix_expression ::= postfix_expression [ expression ] .
postfix_expression ::= postfix_expression ( ) .
postfix_expression ::= postfix_expression ( argument_expression_list ) .
postfix_expression ::= postfix_expression d x_ .
postfix_expression ::= postfix_expression ->x_ .
postfix_expression ::= postfix_expression ++ .
postfix_expression ::= postfix_expression -- .
postfix_expression ::= ( type_name ) { initializer_list } .
postfix_expression ::= ( type_name ) { initializer_list c_ } .
argument_expression_list ::= assignment_expression .
argument_expression_list ::= argument_expression_list c_ assignment_expression .
unary_expression ::= postfix_expression .
unary_expression ::= ++ unary_expression .
unary_expression ::= -- unary_expression .
unary_expression ::= unary_operator cast_expression .
unary_expression ::= sizeof_ unary_expression .
unary_expression ::= sizeof_ ( type_name ) .
unary_operator ::= &_ .
unary_operator ::= *_ .
unary_operator ::= +_ .
unary_operator ::= -_ .
unary_operator ::= ~_ .
unary_operator ::= !_ .
cast_expression	::= unary_expression .
cast_expression	::= ( type_name ) cast_expression .
multiplicative_expression ::= cast_expression .
multiplicative_expression ::= multiplicative_expression *_ cast_expression .
multiplicative_expression ::= multiplicative_expression /_ cast_expression .
multiplicative_expression ::= multiplicative_expression %_ cast_expression .
additive_expression ::= multiplicative_expression .
additive_expression ::= additive_expression +_ multiplicative_expression .
additive_expression ::= additive_expression -_ multiplicative_expression .
shift_expression ::= additive_expression .
shift_expression ::= shift_expression <<_ additive_expression .
shift_expression ::= shift_expression >>_ additive_expression .
relational_expression ::= shift_expression .
relational_expression ::= relational_expression <_ shift_expression .
relational_expression ::= relational_expression >_ shift_expression .
relational_expression ::= relational_expression <= shift_expression .
relational_expression ::= relational_expression <= shift_expression .
equality_expression ::= relational_expression .
equality_expression ::= equality_expression ==_ relational_expression .
equality_expression ::= equality_expression !=_ relational_expression .
and_expression ::= equality_expression .
and_expression ::= and_expression &_ equality_expression .
exclusive_or_expression ::= and_expression .
exclusive_or_expression ::= exclusive_or_expression ^_ and_expression .
inclusive_or_expression ::= exclusive_or_expression .
inclusive_or_expression ::= inclusive_or_expression |_ exclusive_or_expression .
logical_and_expression ::= inclusive_or_expression .
logical_and_expression ::= logical_and_expression &&_ inclusive_or_expression .
logical_or_expression ::= logical_and_expression .
logical_or_expression ::= logical_or_expression ||_ logical_and_expression .
conditional_expression ::= logical_or_expression .
conditional_expression ::= logical_or_expression ?_ expression :_ conditional_expression .
assignment_expression ::= conditional_expression .
assignment_expression ::= unary_expression assignment_operator assignment_expression .
assignment_operator ::= =_ .
assignment_operator ::= *=_ .
assignment_operator ::= /=_ .
assignment_operator ::= %=_ .
assignment_operator ::= +=_ .
assignment_operator ::= -=_ .
assignment_operator ::= <<=_ .
assignment_operator ::= >>=_ .
assignment_operator ::= &=_ .
assignment_operator ::= ^=_ .
assignment_operator ::= |=_ .
expression ::= assignment_expression .
expression ::= expression c_ assignment_expression .
constant_expression ::= conditional_expression .
declaration ::= declaration_specifiers ;_ .
declaration ::= declaration_specifiers init_declarator_list ;_ .
declaration_specifiers ::= storage_class_specifier .
declaration_specifiers ::= storage_class_specifier declaration_specifiers .
declaration_specifiers ::= type_specifier .
declaration_specifiers ::= type_specifier declaration_specifiers .
declaration_specifiers ::= type_qualifier .
declaration_specifiers ::= type_qualifier declaration_specifiers .
declaration_specifiers ::= function_specifier .
declaration_specifiers ::= function_specifier declaration_specifiers .
init_declarator_list ::= init_declarator .
init_declarator_list ::= init_declarator_list c_ init_declarator .
init_declarator ::= declarator .
init_declarator ::= declarator = initializer .
storage_class_specifier ::= typedef_ .
storage_class_specifier ::= extern_ .
storage_class_specifier ::= static_ .
storage_class_specifier ::= auto_ .
storage_class_specifier ::= register_ .
type_specifier ::= void_ .
type_specifier ::= char_ .
type_specifier ::= short_ .
type_specifier ::= int_ .
type_specifier ::= long_ .
type_specifier ::= float_ .
type_specifier ::= double_ .
type_specifier ::= signed_ .
type_specifier ::= unsigned_ .
type_specifier ::= bool_ .
type_specifier ::= complex_ .
type_specifier ::= imaginary_ .
type_specifier ::= struct_or_union_specifier .
type_specifier ::= enum_specifier .
type_specifier ::= t_ .
struct_or_union_specifier ::= struct_or_union x_ { struct_declaration_list } .
struct_or_union_specifier ::= struct_or_union { struct_declaration_list } .
struct_or_union_specifier ::= struct_or_union x_ .
struct_or_union ::= struct_ .
struct_or_union ::= union_ .
struct_declaration_list ::= struct_declaration .
struct_declaration_list ::= struct_declaration_list struct_declaration .
struct_declaration ::= specifier_qualifier_list struct_declarator_list ;_ .
specifier_qualifier_list ::= type_specifier specifier_qualifier_list .
specifier_qualifier_list ::= type_specifier .
specifier_qualifier_list ::= type_qualifier specifier_qualifier_list .
specifier_qualifier_list ::= type_qualifier .
struct_declarator_list ::= struct_declarator .
struct_declarator_list ::= struct_declarator_list c_ struct_declarator .
struct_declarator ::= declarator .
struct_declarator ::= : constant_expression .
struct_declarator ::= declarator :_ constant_expression .
enum_specifier ::= enum_ { enumerator_list } .
enum_specifier ::= enum_ x_ { enumerator_list } .
enum_specifier ::= enum_ { enumerator_list c_ } .
enum_specifier ::= enum_ x_ { enumerator_list c_ } .
enum_specifier ::= enum_ x_ .
enumerator_list ::= enumerator .
enumerator_list ::= enumerator_list c_ enumerator .
enumerator ::= x_ .
enumerator ::= x_ =_ constant_expression .
type_qualifier ::= const_ .
type_qualifier ::= restrict_ .
type_qualifier ::= volatile_ .
function_specifier ::= inline_ .
declarator ::= pointer direct_declarator .
declarator ::= direct_declarator .
direct_declarator ::= x_ .
direct_declarator ::= ( declarator ) .
direct_declarator ::= direct_declarator [ type_qualifier_list assignment_expression ] .
direct_declarator ::= direct_declarator [ type_qualifier_list ] .
direct_declarator ::= direct_declarator [ assignment_expression ] .
direct_declarator ::= direct_declarator [ static type_qualifier_list assignment_expression ] .
direct_declarator ::= direct_declarator [ type_qualifier_list static_ assignment_expression ] .
direct_declarator ::= direct_declarator [ type_qualifier_list *_ ] .
direct_declarator ::= direct_declarator [ *_ ] .
direct_declarator ::= direct_declarator [ ] .
direct_declarator ::= direct_declarator ( parameter_type_list ) .
direct_declarator ::= direct_declarator ( identifier_list ) .
direct_declarator ::= direct_declarator ( ) .
pointer ::= *_ .
pointer ::= *_ type_qualifier_list .
pointer ::= *_ pointer .
pointer ::= *_ type_qualifier_list pointer .
type_qualifier_list ::= type_qualifier .
type_qualifier_list ::= type_qualifier_list type_qualifier .
parameter_type_list ::= parameter_list .
parameter_type_list ::= parameter_list c_ ..._ .
parameter_list ::= parameter_declaration .
parameter_list ::= parameter_list c_ parameter_declaration .
parameter_declaration ::= declaration_specifiers declarator .
parameter_declaration ::= declaration_specifiers abstract_declarator .
parameter_declaration ::= declaration_specifiers .
identifier_list ::= x_ .
identifier_list ::= identifier_list c_ x_ .
type_name ::= specifier_qualifier_list .
type_name ::= specifier_qualifier_list abstract_declarator .
abstract_declarator ::= pointer .
abstract_declarator ::= direct_abstract_declarator .
abstract_declarator ::= pointer direct_abstract_declarator .
direct_abstract_declarator ::= ( abstract_declarator ) .
direct_abstract_declarator ::= [ ] .
direct_abstract_declarator ::= [ assignment_expression ] .
direct_abstract_declarator ::= direct_abstract_declarator [ ] .
direct_abstract_declarator ::= direct_abstract_declarator [ assignment_expression ] .
direct_abstract_declarator ::= [ *_ ] .
direct_abstract_declarator ::= direct_abstract_declarator [ *_ ] .
direct_abstract_declarator ::= ( ) .
direct_abstract_declarator ::= ( parameter_type_list ) .
direct_abstract_declarator ::= direct_abstract_declarator ( ) .
direct_abstract_declarator ::= direct_abstract_declarator ( parameter_type_list ) .
initializer ::= assignment_expression .
initializer ::= { initializer_list } .
initializer ::= { initializer_list c_ } .
initializer_list ::= initializer .
initializer_list ::= designation initializer .
initializer_list ::= initializer_list c_ initializer .
initializer_list ::= initializer_list c_ designation initializer .
designation ::= designator_list =_ .
designator_list ::= designator .
designator_list ::= designator_list designator .
designator ::= [ constant_expression ] .
designator ::= ._ x_ .
statement ::= labeled_statement .
statement ::= compound_statement .
statement ::= expression_statement .
statement ::= selection_statement .
statement ::= iteration_statement .
statement ::= jump_statement .
labeled_statement ::= x_ :_ statement .
labeled_statement ::= case_ constant_expression :_ statement .
labeled_statement ::= default:_ statement .
compound_statement ::= { } .
compound_statement ::= { block_item_list } .
block_item_list ::= block_item .
block_item_list ::= block_item_list block_item .
block_item ::= declaration .
block_item ::= statement .
expression_statement ::= ;_ .
expression_statement ::= expression ;_ .
selection_statement ::= if_ ( expression ) statement .
selection_statement ::= if_ ( expression ) statement else_ statement .
selection_statement ::= switch_ ( expression ) statement .
iteration_statement ::= while_ ( expression ) statement .
iteration_statement ::= do_ statement while_ ( expression ) ;_ .
iteration_statement ::= for_ ( expression_statement expression_statement ) statement .
iteration_statement ::= for_ ( expression_statement expression_statement expression ) statement .
iteration_statement ::= for_ ( declaration expression_statement ) statement .
iteration_statement ::= for_ ( declaration expression_statement expression ) statement .
jump_statement ::= goto_x_;_ .
jump_statement ::= continue_;_ .
jump_statement ::= break_;_ .
jump_statement ::= return_;_ .
jump_statement ::= return_ expression ;_ .
translation_unit ::= external_declaration .
translation_unit ::= translation_unit external_declaration .
external_declaration ::= function_definition .
external_declaration ::= declaration .
function_definition ::= declaration_specifiers declarator declaration_list compound_statement .
function_definition ::= declaration_specifiers declarator compound_statement .
declaration_list ::= declaration .
declaration_list ::= declaration_list declaration .
