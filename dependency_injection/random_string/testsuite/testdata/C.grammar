start ::= translation_unit .
primary_expression ::= IDENTIFIER_ .
primary_expression ::= CONSTANT_ .
primary_expression ::= STRING_LITERAL_ .
primary_expression ::= LPAREN_ expression RPAREN_ .
postfix_expression ::= primary_expression .
postfix_expression ::= postfix_expression LBRACKET_ expression RBRACKET_ .
postfix_expression ::= postfix_expression LPAREN_ RPAREN_ .
postfix_expression ::= postfix_expression LPAREN_ argument_expression_list RPAREN_ .
postfix_expression ::= postfix_expression PERIOD_ IDENTIFIER_ .
postfix_expression ::= postfix_expression PTR_OP_ IDENTIFIER_ .
postfix_expression ::= postfix_expression INC_OP_ .
postfix_expression ::= postfix_expression DEC_OP_ .
postfix_expression ::= LPAREN_ type_name RPAREN_ LBRACE_ initializer_list RBRACE_ .
postfix_expression ::= LPAREN_ type_name RPAREN_ LBRACE_ initializer_list COMMA_ RBRACE_ .
argument_expression_list ::= assignment_expression .
argument_expression_list ::= argument_expression_list COMMA_ assignment_expression .
unary_expression ::= postfix_expression .
unary_expression ::= INC_OP_ unary_expression .
unary_expression ::= DEC_OP_ unary_expression .
unary_expression ::= unary_operator cast_expression .
unary_expression ::= SIZEOF_ unary_expression .
unary_expression ::= SIZEOF_ LPAREN_ type_name RPAREN_ .
unary_operator ::= AMPERSAND_ .
unary_operator ::= ASTERISK_ .
unary_operator ::= PLUS_ .
unary_operator ::= MINUS_ .
unary_operator ::= TILDE_ .
unary_operator ::= BANG_ .
cast_expression	::= unary_expression .
cast_expression	::= LPAREN_ type_name RPAREN_ cast_expression .
multiplicative_expression ::= cast_expression .
multiplicative_expression ::= multiplicative_expression ASTERISK_ cast_expression .
multiplicative_expression ::= multiplicative_expression DIVSLASH_ cast_expression .
multiplicative_expression ::= multiplicative_expression MOD_ cast_expression .
additive_expression ::= multiplicative_expression .
additive_expression ::= additive_expression PLUS_ multiplicative_expression .
additive_expression ::= additive_expression MINUS_ multiplicative_expression .
shift_expression ::= additive_expression .
shift_expression ::= shift_expression LEFT_OP_ additive_expression .
shift_expression ::= shift_expression RIGHT_OP_ additive_expression .
relational_expression ::= shift_expression .
relational_expression ::= relational_expression LESSTHAN_ shift_expression .
relational_expression ::= relational_expression GREATERTHAN_ shift_expression .
relational_expression ::= relational_expression LE_OP shift_expression .
relational_expression ::= relational_expression GE_OP shift_expression .
equality_expression ::= relational_expression .
equality_expression ::= equality_expression EQ_OP_ relational_expression .
equality_expression ::= equality_expression NE_OP_ relational_expression .
and_expression ::= equality_expression .
and_expression ::= and_expression AMPERSAND_ equality_expression .
exclusive_or_expression ::= and_expression .
exclusive_or_expression ::= exclusive_or_expression CARET_ and_expression .
inclusive_or_expression ::= exclusive_or_expression .
inclusive_or_expression ::= inclusive_or_expression PIPE_ exclusive_or_expression .
logical_and_expression ::= inclusive_or_expression .
logical_and_expression ::= logical_and_expression AND_OP_ inclusive_or_expression .
logical_or_expression ::= logical_and_expression .
logical_or_expression ::= logical_or_expression OR_OP_ logical_and_expression .
conditional_expression ::= logical_or_expression .
conditional_expression ::= logical_or_expression QUESTION_ expression COLON_ conditional_expression .
assignment_expression ::= conditional_expression .
assignment_expression ::= unary_expression assignment_operator assignment_expression .
assignment_operator ::= EQUALS_ .
assignment_operator ::= MUL_ASSIGN_ .
assignment_operator ::= DIV_ASSIGN_ .
assignment_operator ::= MOD_ASSIGN_ .
assignment_operator ::= ADD_ASSIGN_ .
assignment_operator ::= SUB_ASSIGN_ .
assignment_operator ::= LEFT_ASSIGN_ .
assignment_operator ::= RIGHT_ASSIGN_ .
assignment_operator ::= AND_ASSIGN_ .
assignment_operator ::= XOR_ASSIGN_ .
assignment_operator ::= OR_ASSIGN_ .
expression ::= assignment_expression .
expression ::= expression COMMA_ assignment_expression .
constant_expression ::= conditional_expression .
declaration ::= declaration_specifiers SEMI_ .
declaration ::= declaration_specifiers init_declarator_list SEMI_ .
declaration_specifiers ::= storage_class_specifier .
declaration_specifiers ::= storage_class_specifier declaration_specifiers .
declaration_specifiers ::= type_specifier .
declaration_specifiers ::= type_specifier declaration_specifiers .
declaration_specifiers ::= type_qualifier .
declaration_specifiers ::= type_qualifier declaration_specifiers .
declaration_specifiers ::= function_specifier .
declaration_specifiers ::= function_specifier declaration_specifiers .
init_declarator_list ::= init_declarator .
init_declarator_list ::= init_declarator_list COMMA_ init_declarator .
init_declarator ::= declarator .
init_declarator ::= declarator EQUALS_ initializer .
storage_class_specifier ::= TYPEDEF_ .
storage_class_specifier ::= EXTERN_ .
storage_class_specifier ::= STATIC_ .
storage_class_specifier ::= AUTO_ .
storage_class_specifier ::= REGISTER_ .
type_specifier ::= VOID_ .
type_specifier ::= CHAR_ .
type_specifier ::= SHORT_ .
type_specifier ::= INT_ .
type_specifier ::= LONG_ .
type_specifier ::= FLOAT_ .
type_specifier ::= DOUBLE_ .
type_specifier ::= SIGNED_ .
type_specifier ::= UNSIGNED_ .
type_specifier ::= BOOL_ .
type_specifier ::= COMPLEX_ .
type_specifier ::= IMAGINARY_ .
type_specifier ::= struct_or_union_specifier .
type_specifier ::= enum_specifier .
type_specifier ::= TYPE_NAME_ .
struct_or_union_specifier ::= struct_or_union IDENTIFIER_ LBRACE_ struct_declaration_list RBRACE_ .
struct_or_union_specifier ::= struct_or_union LBRACE_ struct_declaration_list RBRACE_ .
struct_or_union_specifier ::= struct_or_union IDENTIFIER_ .
struct_or_union ::= STRUCT_ .
struct_or_union ::= UNION_ .
struct_declaration_list ::= struct_declaration .
struct_declaration_list ::= struct_declaration_list struct_declaration .
struct_declaration ::= specifier_qualifier_list struct_declarator_list SEMI_ .
specifier_qualifier_list ::= type_specifier specifier_qualifier_list .
specifier_qualifier_list ::= type_specifier .
specifier_qualifier_list ::= type_qualifier specifier_qualifier_list .
specifier_qualifier_list ::= type_qualifier .
struct_declarator_list ::= struct_declarator .
struct_declarator_list ::= struct_declarator_list COMMA_ struct_declarator .
struct_declarator ::= declarator .
struct_declarator ::= COLON_ constant_expression .
struct_declarator ::= declarator COLON_ constant_expression .
enum_specifier ::= ENUM_ LBRACE_ enumerator_list RBRACE_ .
enum_specifier ::= ENUM_ IDENTIFIER_ LBRACE_ enumerator_list RBRACE_ .
enum_specifier ::= ENUM_ LBRACE_ enumerator_list COMMA_ RBRACE_ .
enum_specifier ::= ENUM_ IDENTIFIER_ LBRACE_ enumerator_list COMMA_ RBRACE_ .
enum_specifier ::= ENUM_ IDENTIFIER_ .
enumerator_list ::= enumerator .
enumerator_list ::= enumerator_list COMMA_ enumerator .
enumerator ::= IDENTIFIER_ .
enumerator ::= IDENTIFIER_ EQUALS_ constant_expression .
type_qualifier ::= CONST_ .
type_qualifier ::= RESTRICT_ .
type_qualifier ::= VOLATILE_ .
function_specifier ::= INLINE_ .
declarator ::= pointer direct_declarator .
declarator ::= direct_declarator .
direct_declarator ::= IDENTIFIER_ .
direct_declarator ::= LPAREN_ declarator RPAREN_ .
direct_declarator ::= direct_declarator LBRACKET_ type_qualifier_list assignment_expression RBRACKET_ .
direct_declarator ::= direct_declarator LBRACKET_ type_qualifier_list RBRACKET_ .
direct_declarator ::= direct_declarator LBRACKET_ assignment_expression RBRACKET_ .
direct_declarator ::= direct_declarator LBRACKET_ STATIC type_qualifier_list assignment_expression RBRACKET_ .
direct_declarator ::= direct_declarator LBRACKET_ type_qualifier_list STATIC_ assignment_expression RBRACKET_ .
direct_declarator ::= direct_declarator LBRACKET_ type_qualifier_list ASTERISK_ RBRACKET_ .
direct_declarator ::= direct_declarator LBRACKET_ ASTERISK_ RBRACKET_ .
direct_declarator ::= direct_declarator LBRACKET_ RBRACKET_ .
direct_declarator ::= direct_declarator LPAREN parameter_type_list RPAREN_ .
direct_declarator ::= direct_declarator LPAREN identifier_list RPAREN_ .
direct_declarator ::= direct_declarator LPAREN RPAREN_ .
pointer ::= ASTERISK_ .
pointer ::= ASTERISK_ type_qualifier_list .
pointer ::= ASTERISK_ pointer .
pointer ::= ASTERISK_ type_qualifier_list pointer .
type_qualifier_list ::= type_qualifier .
type_qualifier_list ::= type_qualifier_list type_qualifier .
parameter_type_list ::= parameter_list .
parameter_type_list ::= parameter_list COMMA_ ELLIPSIS_ .
parameter_list ::= parameter_declaration .
parameter_list ::= parameter_list COMMA_ parameter_declaration .
parameter_declaration ::= declaration_specifiers declarator .
parameter_declaration ::= declaration_specifiers abstract_declarator .
parameter_declaration ::= declaration_specifiers .
identifier_list ::= IDENTIFIER_ .
identifier_list ::= identifier_list COMMA_ IDENTIFIER_ .
type_name ::= specifier_qualifier_list .
type_name ::= specifier_qualifier_list abstract_declarator .
abstract_declarator ::= pointer .
abstract_declarator ::= direct_abstract_declarator .
abstract_declarator ::= pointer direct_abstract_declarator .
direct_abstract_declarator ::= LPAREN_ abstract_declarator RPAREN_ .
direct_abstract_declarator ::= LBRACKET_ RBRACKET_ .
direct_abstract_declarator ::= LBRACKET_ assignment_expression RBRACKET_ .
direct_abstract_declarator ::= direct_abstract_declarator LBRACKET_ RBRACKET_ .
direct_abstract_declarator ::= direct_abstract_declarator LBRACKET_ assignment_expression RBRACKET_ .
direct_abstract_declarator ::= LBRACKET_ ASTERISK_ RBRACKET_ .
direct_abstract_declarator ::= direct_abstract_declarator LBRACKET_ ASTERISK_ RBRACKET_ .
direct_abstract_declarator ::= LPAREN_ RPAREN_ .
direct_abstract_declarator ::= LPAREN_ parameter_type_list RPAREN_ .
direct_abstract_declarator ::= direct_abstract_declarator LPAREN_ RPAREN_ .
direct_abstract_declarator ::= direct_abstract_declarator LPAREN_ parameter_type_list RPAREN_ .
initializer ::= assignment_expression .
initializer ::= LBRACE_ initializer_list RBRACE_ .
initializer ::= LBRACE_ initializer_list COMMA_ RBRACE_ .
initializer_list ::= initializer .
initializer_list ::= designation initializer .
initializer_list ::= initializer_list COMMA_ initializer .
initializer_list ::= initializer_list COMMA_ designation initializer .
designation ::= designator_list EQUALS_ .
designator_list ::= designator .
designator_list ::= designator_list designator .
designator ::= LBRACKET_ constant_expression RBRACKET_ .
designator ::= PERIOD_ IDENTIFIER_ .
statement ::= labeled_statement .
statement ::= compound_statement .
statement ::= expression_statement .
statement ::= selection_statement .
statement ::= iteration_statement .
statement ::= jump_statement .
labeled_statement ::= IDENTIFIER_ COLON_ statement .
labeled_statement ::= CASE_ constant_expression COLON_ statement .
labeled_statement ::= DEFAULT_ COLON_ statement .
compound_statement ::= LBRACE_ RBRACE_ .
compound_statement ::= LBRACE_ block_item_list RBRACE_ .
block_item_list ::= block_item .
block_item_list ::= block_item_list block_item .
block_item ::= declaration .
block_item ::= statement .
expression_statement ::= SEMI_ .
expression_statement ::= expression SEMI_ .
selection_statement ::= IF_ LPAREN_ expression RPAREN_ statement .
selection_statement ::= IF_ LPAREN_ expression RPAREN_ statement ELSE_ statement .
selection_statement ::= SWITCH_ LPAREN_ expression RPAREN_ statement .
iteration_statement ::= WHILE_ LPAREN_ expression RPAREN_ statement .
iteration_statement ::= DO_ statement WHILE_ LPAREN_ expression RPAREN_ SEMI_ .
iteration_statement ::= FOR_ LPAREN_ expression_statement expression_statement RPAREN_ statement .
iteration_statement ::= FOR_ LPAREN_ expression_statement expression_statement expression RPAREN_ statement .
iteration_statement ::= FOR_ LPAREN_ declaration expression_statement RPAREN_ statement .
iteration_statement ::= FOR_ LPAREN_ declaration expression_statement expression RPAREN_ statement .
jump_statement ::= GOTO_ IDENTIFIER_ SEMI_ .
jump_statement ::= CONTINUE_ SEMI_ .
jump_statement ::= BREAK_ SEMI_ .
jump_statement ::= RETURN_ SEMI_ .
jump_statement ::= RETURN_ expression SEMI_ .
translation_unit ::= external_declaration .
translation_unit ::= translation_unit external_declaration .
external_declaration ::= function_definition .
external_declaration ::= declaration .
function_definition ::= declaration_specifiers declarator declaration_list compound_statement .
function_definition ::= declaration_specifiers declarator compound_statement .
declaration_list ::= declaration .
declaration_list ::= declaration_list declaration .
