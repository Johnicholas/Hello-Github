%include {
#include <stdio.h>

int cons(int x, int y) { // a fake implementation of cons, for now
    return x + y;
}
}

%parse_accept {
printf("parsing complete\n");
}

%stack_overflow {
fprintf(stderr, "error: parser stack overflow\n");
}

%token_type int

start ::= document .
document ::= .
document ::= document line .
line ::= sentence PERIOD . 
sentence ::= rule .
sentence ::= query .
sentence ::= command .
rule ::= head . // add a null tail and assert the fact into the global database
rule ::= head IMPLIED_BY tail . // assert the rule into the global database
query ::= BEGIN_QUERY tail . // solve the query
command ::= INCLUDE file_name . // tell the lexer to push the new file onto the stack of streams
command ::= EXIT . // halt, or possibly tell the lexer to halt
file_name ::= LOWER_ID . 
file_name ::= UPPER_ID . 
head ::= goal . 
tail ::= goal . 
tail(A) ::= goal(B) COMMA tail(C) . { A= cons(B, C); } // TODO: right recursion. Bad!
goal ::= constant . 
goal ::= variable . 
goal ::= structure . 
constant ::= LOWER_ID . 
variable ::= UPPER_ID . 
structure ::= LOWER_ID OPEN_PAREN component_list CLOSE_PAREN . 
component_list ::= goal . 
component_list(A) ::= goal(B) COMMA component_list(C) . { A= cons(B, C); } // TODO: right recursion. Bad!
