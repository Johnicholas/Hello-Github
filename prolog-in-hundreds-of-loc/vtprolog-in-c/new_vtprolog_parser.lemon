%include {
#include <stdio.h>

int cons(int x, int y) { // a fake implementation of cons, for now
    return x + y;
}
int append(int x, int y) { // a fake implementation of append, for now
    return x + y;
}
}

%parse_accept {
printf("parsing complete\n");
}

%stack_overflow {
fprintf(stderr, "error: parser stack overflow\n");
}

%token_type int

start ::= document .
document ::= .
document ::= line document  .
line ::= sentence PERIOD . 
sentence ::= BEGIN_QUERY tail . // tell the machine to solve the query
sentence ::= INCLUDE file_name . // tell the machine to push the new file onto the stack of streams
sentence ::= EXIT . // tell the machine to halt
sentence ::= rule . // tell the machine to assert the rule into the global database
rule ::= goal . // add a null tail and build a rule abstract syntax tree node
rule ::= goal IMPLIED_BY tail . // build a rule abstract syntax tree node
tail ::= goal . // build a singleton list-of-goals abstract syntax tree
tail(A) ::= tail(B) COMMA goal(C) . { A= append(B, C); }
goal ::= LOWER_ID . // build a constant abstract syntax tree
goal ::= UPPER_ID .  // build a variable abstract syntax tree
goal ::= LOWER_ID OPEN_PAREN component_list CLOSE_PAREN . // build a functor astract syntax tree
component_list ::= goal . 
component_list(A) ::= component_list(B) COMMA goal(C). { A= append(B, C); }
file_name ::= LOWER_ID . 
file_name ::= UPPER_ID . 
